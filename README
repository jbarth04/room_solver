# Room Solver
# Created by: Josie Barth
# Date: October 27th 2016
# Last Modified: October 29th 2016 


Problem statement:

    Given n people trying to sort out room arrangements for n rooms, this 
    program solves possible room combination given the preferences from
    each user.  If no room combinations are possible to satisfy "yes" 
    preferences to each person, this program prints "no solution" to 
    standard output.

Example input: 

    First line of input is the number of people (which is also equal to 
    the number of rooms).
    The following n lines of input are the names of n people, each with 
    n preferences.  Preferences are indicated by either Y (yes) or N (no)
    for each room.

     4
     Josie Y N Y N
     Sophie Y N N N
     Cristiana N N N Y
     Madison N Y Y Y

How to compile:
    
    Use the makefile:
        1) run "make"
        2) run executable binary -- ./roomsolver INPUT.txt 

    $ make
    clang++ -O0 -Wall -Wextra -g -o roomsolver RoomSolver.cpp main.cpp 
    $ ./roomsolver example-input.txt


Architecture:
    
    The user input is read and stored in a 2D array preferenceMap.
    The room combinations are recursively solved by iterating through
    each user preference.  If a user gives a "yes" preference to a room
    and that room is not already taken, then that room is added to the
    room map as "taken", the room is temporarily assigned to that user, and 
    another recursive call to "solve" is executed for the next user.  Room 
    availability is stored in a hash map that takes the room number as a key 
    and returns a value of true if the room is taken and false is it's still
    available.  If n temporary rooms have been assigned to n number of
    users, then the combination of those rooms are added to the Solutions 
    array.  This same process repeats until all combinations are tested.  

    The recursive function "solve" has O(n^n) time complexity, since 
    at every recursive call for n users (the rows), we must check n rooms
    for each user (the columns)

